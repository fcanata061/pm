from core import database, logger

# Pacotes cr√≠ticos (n√£o atualizados automaticamente, apenas aviso)
CRITICAL_PACKAGES = ["gcc", "glibc", "linux-kernel", "xorg-server"]

def get_installed_versions():
    """
    Retorna um dicion√°rio {nome_pacote: vers√£o_instalada} de todos os pacotes instalados.
    """
    installed = database.get_installed_packages()
    return {pkg["nome"]: pkg["versao"] for pkg in installed}

def get_latest_versions():
    """
    Retorna um dicion√°rio {nome_pacote: vers√£o_mais_recente} de todas as receitas.
    """
    all_recipes = database.get_all_packages()
    return {pkg["nome"]: pkg.get("versao", "N/A") for pkg in all_recipes}

def check_for_updates():
    """
    Compara vers√µes instaladas com as mais recentes e retorna pacotes que precisam de atualiza√ß√£o.
    """
    installed = get_installed_versions()
    latest = get_latest_versions()

    updates = []
    for name, version in installed.items():
        latest_version = latest.get(name)
        if latest_version and latest_version != version:
            updates.append((name, version, latest_version))
    return updates

def display_updates():
    """
    Mostra no terminal quais pacotes t√™m nova vers√£o.
    """
    updates = check_for_updates()
    if not updates:
        logger.info("‚úÖ Todos os pacotes est√£o atualizados.")
        return

    for name, current, latest in updates:
        if name in CRITICAL_PACKAGES:
            logger.warn(f"‚ö† Pacote cr√≠tico {name} tem nova vers√£o: {current} ‚Üí {latest} (n√£o ser√° atualizado automaticamente)")
        else:
            logger.info(f"üîÑ Pacote opcional {name} pode ser atualizado: {current} ‚Üí {latest}")

def update_package(name):
    """
    Atualiza um pacote espec√≠fico se n√£o for cr√≠tico.
    """
    if name in CRITICAL_PACKAGES:
        logger.warn(f"‚ö† Pacote cr√≠tico {name} n√£o ser√° atualizado automaticamente")
        return

    latest_version = get_latest_versions().get(name)
    installed_version = get_installed_versions().get(name)

    if not latest_version:
        logger.warn(f"Receita de {name} n√£o encontrada")
        return

    if latest_version == installed_version:
        logger.info(f"{name} j√° est√° atualizado ({installed_version})")
        return

    recipe = database.find_recipe(name)
    if recipe:
        from core import install
        logger.info(f"üîÑ Atualizando {name}: {installed_version} ‚Üí {latest_version}")
        install.install(recipe)
    else:
        logger.warn(f"Receita de {name} n√£o encontrada, atualiza√ß√£o abortada")
